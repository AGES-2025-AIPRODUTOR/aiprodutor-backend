generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Producer {
  id         Int       @id @default(autoincrement())
  name       String
  document   String    @unique
  phone      String?
  email      String    @unique
  zipCode    String
  city       String
  street     String
  number     String
  complement String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  areas    Area[]
  harvests Harvest[] // Relação 1-N: Um produtor tem muitas safras

  @@map("producers")
}

model Area {
  id               Int       @id @default(autoincrement())
  name             String
  polygon          Unsupported("geometry")
  areaM2           Decimal            
  color            String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  producerId       Int
  soilTypeId       Int
  irrigationTypeId Int
  isActive         Boolean   @default(true)

  irrigationType IrrigationType @relation(fields: [irrigationTypeId], references: [id])
  producer       Producer       @relation(fields: [producerId], references: [id])
  soilType       SoilType       @relation(fields: [soilTypeId], references: [id])
  
  // Relação N-N: Uma área pode ter muitos plantios e participar de muitas safras
  plantings        Planting[]
  harvests         Harvest[]

  @@map("areas")
}

model Harvest {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  cycle     String?
  startDate DateTime
  endDate   DateTime?
  status    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expectedYield Float?    @map("expected_yield")
  // Relação 1-N: A safra pertence a um produtor
  producerId Int
  producer   Producer  @relation(fields: [producerId], references: [id])

  // Relação 1-N: Uma safra "contém" muitos plantios
  plantings Planting[]
  // Relação N-N: Uma safra pode abranger muitas áreas
  areas     Area[]

  @@map("harvests")
}

model Planting {
  id                  Int        @id @default(autoincrement())
  name                String
  plantingDate        DateTime
  plantingEndDate     DateTime?
  expectedHarvestDate DateTime?
  quantityPlanted     Float
  quantityHarvested   Float?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  expectedYield       Float?     @map("expected_yield")

  // Relação 1-N: Um plantio pertence a uma safra
  harvestId Int
  harvest   Harvest @relation(fields: [harvestId], references: [id])

  // Relações com Produto e Variedade
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  varietyId Int
  variety   Variety @relation(fields: [varietyId], references: [id])

  // Relação N-N: Um plantio pode ocupar muitas áreas
  areas     Area[]

  @@map("plantings")
}

model SoilType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  areas       Area[]

  @@map("soil_types")
}

model IrrigationType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  areas       Area[]

  @@map("irrigation_types")
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plantings Planting[]
  varieties Variety[]

  @@map("products")
}

model Variety {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  plantings Planting[]

  @@map("varieties")
}