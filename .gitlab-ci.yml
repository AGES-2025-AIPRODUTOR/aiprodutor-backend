# Define os estágios (fases) da pipeline. O template SAST precisa do estágio 'test'.
stages:
  - setup
  - test
  - build

# Inclui o template de SAST. Ele irá adicionar seus jobs automaticamente ao estágio 'test'.
include:
  - template: Security/SAST.gitlab-ci.yml

# A REGRA PRINCIPAL: Define quando a pipeline inteira deve ser executada.
# Isso é mais limpo do que repetir a regra em cada job.
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "developer"'

# Otimização: Guarda a pasta node_modules para acelerar jobs futuros.
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/

# --- ESTÁGIO DE CONFIGURAÇÃO ---
install_dependencies:
  stage: setup
  image: node:20.11.1-alpine
  script:
    - echo "Instalando dependências..."
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

# --- ESTÁGIO DE TESTE E VALIDAÇÃO ---
# Os jobs de SAST (semgrep-sast, etc.) serão adicionados aqui automaticamente.

run_lint:
  stage: test
  image: node:20.11.1-alpine
  needs: [install_dependencies]
  script:
    - echo "Verificando a qualidade do código com ESLint..."
    - npm run lint

run_security_audit:
  stage: test
  image: node:20.11.1-alpine
  needs: [install_dependencies]
  script:
    - echo "Verificando vulnerabilidades nas dependências com NPM Audit..."
    - npm audit
  allow_failure: true # Permite falhas para não bloquear o MR por vulnerabilidades baixas.

run_unit_tests:
  stage: test
  image: node:20.11.1-alpine
  needs: [install_dependencies]
  script:
    - echo "Rodando testes unitários e gerando relatório de cobertura..."
    - npm run test:cov
  coverage: /All files\s*\|\s*(\d+.\d+)/
  artifacts:
    paths:
      - coverage/
    when: on_success
    expire_in: 1 week

# --- ESTÁGIO DE BUILD ---
docker_build_test:
  stage: build
  image: docker:20.10.24
  services:
    - name: docker:20.10.24
      alias: docker
      command: ["dind"]
  script:
    - echo "Testando o build da imagem Docker..."
    - docker build -t aiprodutor-backend-test:$CI_COMMIT_SHA .
    - echo "Build da imagem Docker concluído com sucesso."